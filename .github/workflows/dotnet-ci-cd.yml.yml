name: .NET CI/CD

on:
  push:
    branches: [ master ]
    tags:
    - 'v*'   # وقتی tag مثل v1.0.0 بزنی، اونم میره روی ایمیج

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests
        run: dotnet test --configuration Release --verbosity normal

  docker-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker image tag
        id: vars
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            IMAGE_TAG=${GITHUB_REF#refs/tags/}   # مثلا v1.2.0
          else
            IMAGE_TAG=latest
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Docker image
        run: |
          IMAGE_NAME=rasooldocker/ddd-clean
          docker build -t $IMAGE_NAME:${IMAGE_TAG} -f API/Dockerfile .
          docker push $IMAGE_NAME:${IMAGE_TAG}

      - name: Tag latest
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_NAME=rasooldocker/ddd-clean
          docker tag $IMAGE_NAME:${IMAGE_TAG} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and Push Docker image
  #       run: |
  #         IMAGE_NAME=rasooldocker/ddd-clean
  #         IMAGE_TAG=latest
  #         docker build -t $IMAGE_NAME:$IMAGE_TAG -f API/Dockerfile .
  #         docker push $IMAGE_NAME:$IMAGE_TAG